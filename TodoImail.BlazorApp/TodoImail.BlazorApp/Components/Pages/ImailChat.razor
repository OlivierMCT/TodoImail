@page "/chat"

@rendermode @(new InteractiveServerRenderMode(prerender: true))


<PageTitle>Chat</PageTitle>
<h1>Imail Chat</h1>

@if (!IsConnected) {
    <section>
        <div class="input-group my-5">
            <input @bind="Pseudo" @bind:event="oninput" type="text" class="form-control form-control-lg" placeholder="mon pseudo">
            <button @onclick="Connect" disabled="@string.IsNullOrEmpty(Pseudo)" class="btn btn-lg btn-info" type="button">
                <i class="fa fa-sign-in"></i>
            </button>
        </div>
    </section>
} else {
    <section class="d-flex">
        <div class="me-2 d-flex flex-column">
            <ul class="list-group">
                <li class="list-group-item list-group-item-dark d-flex justify-content-between align-items-center">
                    <div class="me-2">Connectés</div>
                    <span class="ms-1 badge rounded-pill bg-dark">@ConnectedPseudos.Count</span>
                </li>
                @foreach (var p in ConnectedPseudos.OrderBy(p => p)) {
                    <li @onclick="() => ToggleSelectedPseudo(p)"
                        role="button"
                        class="list-group-item @(SelectedPseudos.Contains(p)?"active":"")">@p</li>
                    }
            </ul>
            <button @onclick="Disconnect" class="btn btn-dark mt-2 align-self-center" disabled="@(!IsConnected)">
                Déconnexion
            </button>
        </div>

        <div class="d-flex flex-column flex-grow-1">
            <div style="height: 40vh; overflow:scroll" class="d-flex flex-column">
                @foreach (var msg in Messages) {
                    <div class="my-1 mb-3 @(msg.From == Pseudo?"align-self-end":"align-self-start")">
                        <div class="badge text-bg-dark fs-6">
                            @msg.Message
                        </div>
                        <small class="d-block">
                            @msg.From
                            @(msg.MessageType == Models.ChatMessageType.Public?"": "pour toi")
                            <small class="text-muted text-secondary">@msg.Timestamp.ToString("à HH:mm")</small>
                        </small>

                    </div>
                }
            </div>
            <div class="input-group my-1">
                <input @bind="Message" @bind:event="oninput" type="text" class="form-control" placeholder="mon message pour @Senders">
                <button @onclick="SendMessage" disabled="@string.IsNullOrEmpty(Message)" class="btn btn-primary" type="button">
                    <i class="fa fa-paper-plane"></i>
                </button>
            </div>
            <span class="badge text-bg-dark align-self-end">
                message pour @Senders
            </span>
        </div>

    </section>
}
@if (!string.IsNullOrWhiteSpace(ErrorMessage)) {
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

@code {

}
